# frozen_string_literal: true

module Consultant
  module Utility
    module RecordFetcherHelpers
      extend ActiveSupport::Concern

      NON_ID_LINE_MARKERS = [
        /^\W$/,
        'STATS',
        'Average:',
        'Median:',
        'Min:',
        'Max:',
        'Total:',
      ].freeze

      included do
        def klass
          @klass ||=
            if defined?(record_type)
              record_type
            else
              record_type.to_s.titleize.gsub(' ', '').constantize
            end
        end

        def random_results_from(ids)
          return klass.find(ids) if ids.length <= number_of_runs

          random_ids = (0...number_of_runs).map { sample!(ids) }
          klass.find(random_ids)
        end

        def parse_and_validate_input_file_line!(line)
          if id_line?(line)
            parser = /#{klass.name.downcase} id \â€” (\d*)\:/
            match = line.match(parser)
            if match.nil?
              raise "Invalid input: #{line}"\
              "Make sure that the file you supplied:\n"\
              "1) was generated by the CollectionStatistics service\n"\
              "2) was tested on a collection of #{klass.model_name.plural}"
            else
              match[1].to_i
            end
          end
        end

        def sample!(arr)
          arr.delete_at(
            rand(0...arr.length),
          )
        end

        private
        def id_line?(line)
          NON_ID_LINE_MARKERS.map do |marker|
            line.match(marker)
          end.compact.empty?
        end
      end
    end
  end
end