# frozen_string_literal: true

module Consultant
  module CsvUtility
    module Validations
      extend ActiveSupport::Concern
      include Consultant::Utility::FileUtilities

      included do
        def validate_consistency_of_data!(files)
          row_names_per_file = files.map do |file|
            Parsers.extract_row_names_from(file)
          end
          row_names_per_file.each_with_index do |row_names, index|
            next_file_row_names = row_names_per_file[index + 1]
            break if next_file_row_names.nil?
            unless row_names.sort == next_file_row_names.sort
              raise generate_error_message(:inconsistent_data)
            end
          end
        end

        def file_path_regex
          @file_path_regex ||= %r{#{Consultant.configuration.results_directory}\/[A-Za-z\-\_\d\s]*\.txt$}.freeze
        end

        def line_format_regex
          @line_format_regex ||= /.*id\sâ€”\s\d+:\s\d+\.\d+\sseconds/.freeze
        end


        def validate_file_format!(files)
          files.each do |file|
            system_name = Parsers.system_name_for(file)
            if file_empty?(system_name)
              raise generate_error_message(:file_empty, system_name)
            end

            if system_name.match(file_path_regex).nil?
              raise generate_error_message(:invalid_file_path, system_name)
            end

            File.open(Parsers.system_name_for(file), 'r') do |opened_file|
              if opened_file.first.match(line_format_regex).nil?
                raise generate_error_message(:invalid_format)
              end
            end
          end
        end

        private

        def generate_error_message(type, filename = nil)
          case type
          when :inconsistent_data
            'all files provided must have been run on the same dataset'
          when :file_empty
            "file #{filename} does not exist or is empty"
          when :invalid_file_path
            "file path #{filename} is invalid.
                The file should be a .txt file in the results directory"
          when :invalid_format
            'file format is invalid.
                  The file should be generated by the AggregateCheckpoint service'
          end
        end
      end
    end
  end
end
